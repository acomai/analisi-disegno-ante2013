<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>Responsabilit&agrave; per sviluppo e manutenzione software - analisi-disegno.com</title>
<meta name="keywords" content="ruolo, responsabilità, manutenzione, sviluppo, software" />
<meta name="description" content="La separazione di responsabilità tra chi sviluppa nuovo software e chi fa manutenzione è diffusa, ma comporta diversi svantaggi." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
<meta name="author" content="Adriano Comai" />
<meta name="robots" content="noarchive" />
<link rel="stylesheet" type="text/css" href="../analisi-disegno.css" />
</head>

<body>
<p class="iniziale">analisi-disegno.com</p>
	<p class="menu"><a href="../">Homepage</a>&nbsp;| 
	<a href="../notiziario.html">Notiziario</a>&nbsp;| <a href="../welcome_e.html">In English</a></p>
    <hr />
	
      <h1>Responsabilit&agrave; per sviluppo e manutenzione</h1>
      <p>La separazione 
        di responsabilit&agrave; tra sviluppo e manutenzione &egrave; diffusa, 
        soprattutto in ottica di outsourcing.</p>
      <p>Uno dei vantaggi 
        della separazione, e del potenziale <a href="../a_comai/articoli/art01_98_03.htm">outsourcing 
        della manutenzione</a>, viene considerato il liberare per nuovi progetti 
        di sviluppo (considerati come fonte di innovazione) risorse che altrimenti 
        sarebbero assegnate ad attivit&agrave; di manutenzione (considerate come 
        carico negativo che frena l'innovazione).</p>
      <p>Ma la separazione ha pro e contro.</p>
      <hr />
      <p>Robert Glass: 
        <a href="http://www.developerdotstar.com/mag/articles/PDF/DevDotStar_Glass_Maintenance.pdf">Software 
        Maintenance is a solution, not a problem</a></p>
	  <blockquote><p>"In most computing installations, the people who do maintenance tend to be those who are new on the job 
	  or not very good at development. There's a reason for that. Most people would rather do original development; 
	  maintenance is too constraining to the creative juices for most people to enjoy doing it. 
	  And so by default, the least capable and the least in demand are the ones who most often do the maintenance.</p>
      <p>The status quo is all wrong. Maintenance is a significant intellectual challenge as well as a solution and not a problem. 
	  If we want to maximize our effectiveness at doing it, we need to significantly change the way in which we assign people to it."</p></blockquote>
      <hr />
      <p>James Coplien, Neil Harrison: 
        <a href="http://www.amazon.com/exec/obidos/ASIN/0131467409/analisidisegnoco" target="_blank">Organizational 
        Patterns of Agile Software Development</a>, Prentice-Hall 2005 pp.250-251:</p>
      <blockquote><p>&quot;Some of the most powerful 
        design insights come late in the design cycle, particularly during the 
        phase we affectionately call maintenance. But traditional staffing profiles 
        deploy the most skilled designers at the front of the life cycle, leaving 
        the later phases to maintenance engineers.</p>
      <p>Valuable architectural insight 
        tends to emerge late in the life cycle as a result of having addressed 
        requirements from concrete, successive problems drawn from a given domain. 
        It is at this late stage that a system can be refactored to consolidate 
        design insight and to polish reusable artifacts."</p></blockquote>
      <hr />
      <p>Pete McBreen: <a href="http://www.amazon.com/exec/obidos/ASIN/0201733862/analisidisegnoco" target="_blank">Software 
        Craftsmanship</a>, Addison-Wesley 2002, pp.167-168:</p>
      <blockquote><p>&quot;Maintenance is the most 
        important part of the life of any application.</p>
      <p>Software engineering labeled 
        the activities that take place after the initial release as 'maintenance', 
        but this terminology is really just a hangover from the mechanical metaphor. 
        What is really going on here is a whole series of smaller software development 
        projects - some fixing mistakes - but the bulk is either changing the 
        application to meet changing business needs or making major functional 
        enhancements to the application. This work should not be performed by 
        a separate maintenance team. It is wasteful to train a new team of developers 
        when you already have a team perfectly capable of doing this work.</p>
      <p>Maintenance needs to be made a high-status activity.&quot;</p></blockquote>
      <hr />
      <p>Mary and Tom Poppendieck: <a href="http://www.amazon.com/exec/obidos/ASIN/0321437381/analisidisegnoco" target="_blank">Implementing 
        Lean Software Development</a>, Addison-Wesley 2006, p.79</p>
      <blockquote><p>&quot;Any code that is deployed 
        will need maintenance, and sometimes separate maintenance teams are formed 
        so that developers can focus on development and not have to task-switch 
        with maintenance tasks. However, we generally recommend against this, 
        because we believe that it is best for a team to remain with its product 
        over the product's lifecycle. Otherwise people may begin to believe that 
        there is such a thing as &quot;finishing&quot; the code, which is usually 
        a myth. Code is a living thing that will (and should!) constantly change.&quot;</p></blockquote>

      <hr />
      <p><a href="org.htm">Pagina principale su organizzazione e ruoli nello sviluppo software</a></p>

     <hr />
	<p class="centered"><a href="../"> analisi-disegno.com </a>, servizi e materiali per lo sviluppo dei sistemi software, a cura di <a href="../a_comai/adriano_comai.htm">Adriano 
  		Comai</a>. </p>
</body>

</html>
