<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>analisi-disegno.com - novembre 1996 - UML: un linguaggio universale per la progettazione del software</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
<link rel="stylesheet" type="text/css" href="../../analisi-disegno.css" />
</head>

<body>

<p class="iniziale">analisi-disegno.com</p>
	<p class="menu"><a href="../../index.html">Homepage</a>&nbsp;| 
	<a href="../../notiziario.html">Notiziario</a>&nbsp;| <a href="../../welcome_e.html">In English</a></p>
    <hr />
            <b><font COLOR="#004080"> 
            <p>UNIFIED MODELING LANGUAGE: UN LINGUAGGIO UNIVERSALE PER LA PROGETTAZIONE 
              DEL SOFTWARE</p>
            </font></b> 
            <p><font COLOR="#004080">di Adriano Comai<b> </b>(su <b>ZeroUno</b>, 
              novembre 1996)</font> </p>
            <p><font COLOR="#004080">L'obiettivo &egrave; ambizioso. Lo Unified Modeling 
              Language (UML) vuole essere, secondo le intenzioni dei suoi autori, 
              Booch Jacobson e Rumbaugh, &quot;il linguaggio per la creazione 
              di modelli software&quot;. Un linguaggio, cio&egrave;, &#147;universale 
              per la progettazione (modeling) dei sistemi, nel senso che pu&ograve; esprimere 
              modelli di varia tipologia e creati per obiettivi diversi, proprio 
              come un linguaggio di programmazione o un linguaggio naturale possono 
              essere usati in molti modi diversi&quot;.</font> </p>
            <p><font COLOR="#004080">Obiettivo ambizioso. Ma probabilmente realistico. 
              Perch&eacute; Grady Booch, Ivar Jacobson e Jim Rumbaugh, gli autori dell&#146;Unified 
              Modeling Language, sono fra i pi&ugrave; quotati metodologi Object Oriented, 
              e il loro sforzo congiunto per la definizione dell'UML ha funzionato 
              come un catalizzatore, attirando i contributi di altri metodologi 
              di primaria importanza come Coad, Yourdon, Odell.</font> </p>
            <p><b><font COLOR="#004080">Perch&eacute; l&#146;UML?</font></b> </p>
            <p><font COLOR="#004080">Perch&eacute; nel campo delle metodologie di analisi 
              e disegno object oriented la confusione regna ancora sovrana. Qualcuno 
              ne aveva contate pi&ugrave; di cinquanta, ciascuna con i propri modelli 
              ed i propri formalismi. Sebbene le pi&ugrave; diffuse non superino la decina, 
              non &egrave; facile per le aziende intenzionate a muoversi nel settore 
              OO scegliere la pi&ugrave; adeguata.</font> </p>
            <p><font COLOR="#004080">La confusione esistente a livello metodologico 
              si ripercuote poi a livello di strumenti CASE per la progettazione 
              object oriented: sebbene l&#146;orientamento prevalente tra i produttori 
              sia quello di supportare notazioni diverse, l&#146;assenza di uno 
              standard riconosciuto rende rischiosa ogni valutazione di investimento 
              in prodotti di questo genere.</font> </p>
            <p><font COLOR="#004080">In questo confuso panorama, le proposte metodologiche 
              avanzate individualmente da Booch, Rumbaugh e Jacobson risultavano 
              gi&agrave; tra le pi&ugrave; diffuse, il che costituisce un fattore positivo per 
              le prospettive di accettazione dell&#146;Unified Modeling Language.</font> 
            </p>
            <p><font COLOR="#004080">Il &#147;progetto UML&#148; nasce nel 1994, 
              con l&#146;ingresso di Jim Rumbaugh nella societ&agrave; di Grady Booch, 
              la Rational, e si perfeziona con l&#146;acquisizione da parte della 
              Rational, a fine 1995, dell&#146;azienda svedese Objectory, in cui 
              opera Ivar Jacobson.</font> </p>
            <p><b><font COLOR="#004080">Caratteristiche dell&#146;UML</font></b> 
            </p>
            <p><font COLOR="#004080">La prima versione dell'UML (0.8), resa pubblica 
              da Booch e Rumbaugh nell&#146;ottobre 1995, portava il titolo di 
              &quot;Unified Method&quot;. La versione attuale (0.9), uscita nel 
              luglio 1996, a cui ha contribuito anche Jacobson, porta la nuova 
              denominazione.</font> </p>
            <p><font COLOR="#004080">Perch&eacute; questo cambiamento? Perch&eacute; l'UML intende 
              essere, appunto, un linguaggio universale mediante il quale descrivere 
              i diversi modelli prodotti nel corso dello sviluppo software, a 
              prescindere dalle procedure utilizzate per realizzarli. Booch Jacobson 
              e Rumbaugh precisano che definire &quot;un unico processo per tutti 
              gli stili di sviluppo non sembra possibile e neppure desiderabile. 
              [...] Comunque, l'UML pu&ograve; venire utilizzato per esprimere gli output 
              di tutti i diversi processi, cio&egrave; i modelli che vengono prodotti&quot;.</font> 
            </p>
            <p><font COLOR="#004080">Le fondamenta dell'UML sono costituite da 
              un metamodello, che definisce le caratteristiche e le relazioni 
              esistenti tra le diverse componenti di un progetto software (es. 
              classi, attributi, procedure, moduli, ...). Il metamodello costituisce 
              la base per l'implementazione dell'UML da parte dei produttori di 
              strumenti per lo sviluppo (CASE tools, ambienti visuali), e per 
              l'interoperabilit&agrave; tra i diversi strumenti. L'intenzione degli autori 
              &egrave; di produrre una specifica formale del metamodello al momento della 
              sottomissione dell'Unified Modeling Language all'OMG per la sua 
              approvazione come standard (fine '96 - inizio '97).</font> </p>
            <p><font COLOR="#004080">Sulla base di quanto definito nel metamodello, 
              vengono poi proposti alcuni modelli diagrammatici:</font> </p>
            <p><font COLOR="#004080">Livello LOGICO</font> 
            <ul>
              <li><font COLOR="#004080">Diagramma dei casi d'uso (Use Case Diagram)</font></li>
              <li><font COLOR="#004080">Diagramma delle classi (Class Diagram)</font></li>
              <li><font COLOR="#004080">Diagramma di sequenza (Sequence Diagram)</font></li>
              <li><font COLOR="#004080">Diagramma di collaborazione tra oggetti 
                (Collaboration Diagram)</font></li>
              <li><font COLOR="#004080">Diagramma di transizione di stato (State 
                Diagram)</font></li>
            </ul>
            <font COLOR="#004080"> 
            <p>Livello FISICO
            </font> 
            <ul>
              <li><font COLOR="#004080">Diagramma delle componenti software (Component 
                Diagram)</font></li>
              <li><font COLOR="#004080">Diagramma di allocazione delle componenti 
                (Deployment Diagram)</font></li>
            </ul>
            <font COLOR="#004080"> 
            <p>I modelli diagrammatici presentano ovviamente una notazione unificata, 
              frutto di un compromesso tra quelle originarie proposte singolarmente 
              da Booch Jacobson e Rumbaugh, e gi&agrave; adottate dalla maggior parte 
              degli strumenti CASE Object Oriented.</p>
            </font> 
            <p><font COLOR="#004080">In realt&agrave;, il progetto dei tre metodologi 
              non limita l'utilizzo dell'UML al solo ambito Object Oriented. Il 
              loro obiettivo era quello di definire un linguaggio di progettazione 
              che fosse in grado di supportare anche linguaggi e componenti non 
              OO, come file e moduli software tradizionali, ed ogni tipo di componente 
              software a livello fisico.</font> </p>
            <p><font COLOR="#004080">Anche in questo caso i risultati non si sono 
              fatti attendere, in quanto Microsoft e Hewlett Packard hanno aderito 
              al &quot;progetto UML&quot;, che acquista cos&igrave; una ulteriore capacit&agrave; 
              di attrazione anche per le realt&agrave;, praticamente tutte, non ancora 
              strettamente object oriented.</font> </p>
            <p><b><font COLOR="#004080">Quale sar&agrave; l&#146;impatto dell&#146;UML?</font></b> 
            </p>
            <p><font COLOR="#004080">Il primo risultato dell&#146;UML, gi&agrave; raggiunto 
              almeno in parte, &egrave; la riduzione della confusione nel campo delle 
              metodologie di sviluppo object oriented.</font> </p>
            <p><font COLOR="#004080">E&#146; estremamente probabile che l'UML 
              diventi un vero e proprio standard, visto che l'Object Management 
              Group (OMG), un consorzio che raggruppa tutti i produttori di software 
              OO, ha chiesto alla Rational (la societ&agrave; di Booch Jacobson e Rumbaugh) 
              di sottoporre l'UML ad una valutazione mirata a farlo diventare 
              standard OMG.</font> </p>
            <p><font COLOR="#004080">Un secondo risultato prevedibile &egrave; un&#146;accelerazione 
              nella diffusione degli strumenti CASE object oriented, come conseguenza 
              dell&#146;emergere di modelli e di una notazione ampiamente accettati 
              come standard.</font> </p>
            <p><b><font COLOR="#004080">E' la fine dei flow chart?</font></b> 
            </p>
            <p><font COLOR="#004080">Ma cosa cambier&agrave; nel mondo reale delle aziende 
              che producono software? Naturalmente &egrave; ancora presto per dirlo. 
              In molte realt&agrave; la produzione di software &egrave; ancora basata su una 
              definizione delle specifiche di analisi in formato testuale (o addirittura 
              vocale...), e sulla loro immediata implementazione in righe di codice. 
              In altre, il flow chart costituisce da sempre l&#146;unica forma 
              di documentazione. In altre ancora, l'avvento e l'utilizzo dei linguaggi 
              visuali ha fatto pensare che la documentazione del sistema fosse 
              un'attivit&agrave; ormai trascurabile. Ma per tutte le aziende in cui esiste 
              la consapevolezza del fatto che lo sviluppo e la manutenzione del 
              software sono attivit&agrave; complesse, la definizione e la condivisione 
              di modelli formali per le specifiche di analisi e disegno &egrave; un requisito 
              preliminare a ogni produzione di codice.</font> </p>
            <p><font COLOR="#004080">Le aziende pi&ugrave; attente, che da anni documentano 
              i propri sistemi utilizzando modelli derivati dall&#146;approccio 
              strutturato, erano rimaste un po&#146; disorientate, nel passaggio 
              a tecniche di sviluppo orientate agli oggetti, dalla confusione 
              riguardante le scelte metodologiche e gli aspetti di documentazione.</font> 
            </p>
            <p><font COLOR="#004080">In questi contesti, la standardizzazione 
              portata dall'UML, supportata dai futuri strumenti di sviluppo, costituir&agrave; 
              senza dubbio un elemento positivo di razionalizzazione.</font></p>
          </ul>
      <hr />
      <p><a href="../../articoli.htm">Elenco pubblicazioni</a>.</p>

	<hr />
	<p class="centered"><a href="../../index.html"> analisi-disegno.com </a>, servizi e materiali per lo sviluppo dei sistemi software, a cura di <a href="../../a_comai/adriano_comai.htm">Adriano 
  		Comai</a>. </p>  
</body>
</html>
