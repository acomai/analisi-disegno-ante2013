<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>Software Development is Design and Communication - analisi-disegno.com</title>
<meta name="author" content="Adriano Comai" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
<meta name="keywords" content="software development, communication, software design" />
<link rel="stylesheet" type="text/css" href="../analisi-disegno.css" />
</head>

<body>
	<p class="iniziale">analisi-disegno.com</p>
	<p class="menu"><a href="../">Homepage (in Italian)</a>&nbsp;| 
	<a href="../notiziario.html">News (in Italian)</a>&nbsp;| <a href="../welcome_e.html">In English</a></p>
    <hr />

      <h1>Software 
        Development is Design and Communication</h1>
      <p>It is difficult 
        to explain the software development job to people who don't practise it. 
        But it is a popular job (there are many developers) and its results are 
        relevant for those who do other jobs (everybody is somehow in contact 
        with software). So, it makes sense to try to explain what software development 
        is, also in order to debunk two very widespread clich&eacute;.</p>
      <p>Clich&eacute; 
        1: software development being analogous, or at least amenable to industrial 
        production (or to the building industry).</p>
      <p>Clich&eacute; 
        2: software development being an activity mostly suitable for the least 
        sociable people, who don't like to work with others.</p>
      <p>Paradoxical 
        platitudes, for those who work in software development. But widespread 
        platitudes, unhappily common even among software development managers, 
        sometimes with devastating effects on organizational choices, and on personnel 
        selection and training.</p>
      
	  <h2>A complex job</h2>
      <p>Software development is a complex 
        intellectual job, one in which social aspects (relationships and communication) 
        are more relevant than technological aspects.</p>
      <p>The essence of software development 
        is gathering knowledge about an actual problem (the application domain, 
        in a field such as banking or automotive or medical or military industry), 
        and implementing this knowledge, via proper abstraction processes, in 
        an information system [1].</p>
      <p>The complexity of software 
        development comes from three main causes:</p>
      <ul>
        <li>The problem to solve may 
          be complex in itself, for the number of concepts and the complexity 
          of the characteristics and of the relationships of these concepts.</li>
        <li>The definition of the problem 
          and of its solutions is a social process, and it happens through the 
          dialogue between who wants the new system (the customer) and those whose 
          role is to realize it (the developers). In most cases, nor the problem 
          nor the solutions are precisely defined at the beginning of development. 
          They are progressively determined during the project.</li>
        <li>The solution to the problem 
          is bound to the characteristics of the available technologies.</li>
      </ul>
      <p>Every software project has 
        its goals, to reach in order to satisfy the customer and the users (even 
        when, as it usually happens, requirements are clarified during the development). 
        It has a cost, which we want to be minimal. It has time limits, which 
        are usually bound. It happens in an actual social context, with conditionings 
        and cultural constraints.</p>
      
	  <h2>Nor manufacturing, nor construction</h2>
      <p>A long tradition wrongly 
        equates software development with manufacturing.</p>
      <p>From
        this point of view, software development does not happen in an &quot;industrial&quot; 
        way because it is still an young discipline, and we must do every effort 
        to bring it in line with most mature sectors. Hence the idea of realizing 
        software &quot;factories&quot;. Hence, also, a tendency to revive in the 
        software development field organizational models based on the role specialization 
        and on the sequentiality of the assembly line (one century later than 
        in real manufacturing...) [2].</p>
      <p>In the real world, software 
        development has not any resemblance with the process of industrial manufacturing. 
        The proper manufacturing, the creation of thousands or millions of identical 
        copies from a single stamp, in a software project has a percentage cost 
        close to zero. Software development has instead significant similarities 
        with new product development, i.e. design. From the definition of earlier 
        models to the writing of code in a programming language, all software 
        development is, at various detail levels, a design activity.</p>
      <p>The analogy of software development 
        with the building industry is more recent, and surely more accurate, than 
        the analogy with manufacturing, because it brings out the design dimension, 
        and the uniqueness of the results of software projects.</p>
      <p>But there is a basic difference 
        between the building and the software development industries. In building, 
        the separation of the design phase from the realization phase is very 
        marked. Once implemented, the decisions taken during house design may 
        be changed only with a lot of work, because the materials bear the weight 
        and the inertia due to their physicality.</p>
      <p>Software is different. The 
        whole project is design, not only the first phase. And it is, most importantly, 
        an abstraction design. The materials are abstractions, which can be changed 
        in whatever moment, during or after the project, in future evolutions 
        of the software product. Even software changes cost labour, it's true. 
        But a lot less than what is needed to modify architectural choices in 
        the building industry, because abstractions are more malleable than concrete 
        and bricks.</p>
      <h2>A job done in an actual 
        social context</h2>
      <p>The most known image of the 
        software developer is the geek, a young man introverted and 
        pimply, who communicates the least that he can, and when he does it speaks 
        an unintelligible jargon.</p>
      <p>In the real world, software 
        development is a job in which communication and relationship elements 
        are essential. These aspects are shown, in an often realistic way, in 
        the Dilbert cartoon [3], and are covered in a more systematic way in the 
        classic Peopleware [4] and more recently in the works of Alistair Cockburn 
        [5]. From the point of view of the game theory, Cockburn shows the cooperative 
        element in the software development activities:</p>
      <blockquote><p>"Software development 
        is a series of resource-limited, goal-directed cooperative games of invention 
        and communication. The primary goal of each game is the production and 
        deployment of a software system; the residue of the game is a set of markers 
        to assist the players of the next game. People use markers and props to 
        remind, inspire and inform each other in getting to the next move in the 
        game. The next game is an alteration of the system or the creation of 
        a neighboring system. Each game therefore has as a secondary goal to create 
        an advantageous position for the next game. Since each game is resource-limited, 
        the primary and secondary goals compete for resources." (Alistair Cockburn)</p></blockquote>
      <p>There are several social interactions 
        important and instrumental for the course and the outcome of a project:</p>
      <ol>
        <li>those between who wants 
          the system to be developed (the customer) and who develops it (the supplier-developer)</li>
        <li>those among the customer 
          and the various stakeholders, future users included</li>
        <li>those internal to the development 
          group (which in many cases is not a single group, but a series of different 
          groups that must cooperate)</li>
      </ol>
      <p>The first relationship, between 
        customer and supplier, shapes the contractual and economic aspects of 
        the project, the development process, the way the progress made is controlled, 
        the risks management, the requirements communication and management.</p>
      <p>The second relationship, among 
        the customer and the other stakeholders, influences the definition of 
        priorities and of detailed requirements, the way to manage conflicts among 
        concurrent needs, the future acceptance of the system by those who shall 
        use it.</p>
      <p>The third relationship, internal 
        to the development group, influences crucially the productivity and the 
        quality of the development process and of the resulting end product.</p>
      <hr />
      <h2>References:</h2>
      <p>[1] - Philip Armour - <a href="http://www.amazon.com/exec/obidos/ASIN/0849314895/analisidisegnoco" target="_blank">"The 
        Laws of Software Process. A New Model for the Production and Management 
        of Software"</a>, Auerbach 2004</p>
      <p>[2] - Mary e Tom Poppendieck 
        - <a href="http://www.amazon.com/exec/obidos/ASIN/0321150783/analisidisegnoco" target="_blank">"Lean 
        Software Development"</a>, Addison Wesley 2003</p>
      <p>[3] - Scott Adams - <a href="http://www.unitedfeatures.com/?title=Bio:Dilbert%20Dailies">"The 
        Dilbert Zone"</a></p>
      <p>[4] - Tom De Marco e Timothy 
        Lister - <a href="http://www.amazon.com/exec/obidos/ASIN/0932633439/analisidisegnoco">"Peopleware: 
        Productive Projects and Teams"</a> , 2nd Edition Dorset House 1999 
        (1st edition 1987)</p>
      <p>[5] - <a href="http://alistair.cockburn.us" target="_blank">Alistair 
        Cockburn</a>'s website, and of the same author "<a href="http://www.amazon.com/exec/obidos/ASIN/0201699699/analisidisegnoco" target="_blank">Agile 
        Software Development</a>" - Addison-Wesley 2001</p>

<hr />
		<p class="centered"><a href="../welcome_e.html">analisi-disegno.com</a>, services and documents for software development, by <a href="a_comai/adriano_comai_e.htm">Adriano 
  			Comai</a>.</p>
</body>
</html>