<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<title>analisi-disegno.com - marzo 1998 - Manutenzione, che fatica</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
<link rel="stylesheet" type="text/css" href="../../analisi-disegno.css" />
</head>

<body>

<p class="iniziale">analisi-disegno.com</p>
	<p class="menu"><a href="../../index.html">Homepage</a>&nbsp;| 
	<a href="../../notiziario.html">Notiziario</a>&nbsp;| <a href="../../welcome_e.html">In English</a></p>
    <hr />
	
      <b><font COLOR="#004080"><p>MANUTENZIONE, CHE FATICA!</font></b> </p>
      <p><font COLOR="#004080">di Adriano Comai<b> </b>(su <b>ZeroUno</b>, marzo 1998)</font> </p>
      <p><b><font COLOR="#004080">La manutenzione evolutiva del software aziendale &egrave; la strada
      pi&ugrave; comune per soddisfare i nuovi requisiti di business. Ma oltre a essere cara da
      percorrere &egrave; irta di difficolt&agrave;. E l&#146;outsourcing trova i suoi spazi.</font></b> </p>
      <p><font COLOR="#004080">Ogni due o tre anni, ormai ci siamo rassegnati, dobbiamo cambiare
      il nostro Pc. A parte il costo, non &egrave; un grosso problema. E anche se non c&#146; &egrave;
      bisogno di sostituire tutto il sistema, ma solo cambiare il processore, o aggiungere pi&ugrave;
      Ram, o un disco fisso pi&ugrave; capiente, o un modem pi&ugrave; veloce, possiamo farlo senza troppi
      pensieri. Ci sono decine di negozi dove un tecnico pu&ograve; farci in dieci minuti modifiche
      che, avendo tempo e voglia, potremmo fare talvolta anche da soli.</font> <br>
      <font COLOR="#004080">Quanto al software, &egrave; pi&ugrave; o meno lo stesso. Ogni anno i produttori
      rilasciano nuove versioni del word processor, dello spreadsheet, del browser o
      dell&#146;ambiente di sviluppo che usiamo. Non sempre gli upgrade sono giustificati (con
      le nuove versioni si continuano a fare esattamente le stesse cose, anche se a volte con
      maggiore comodit&agrave;) ma dopo un po&#146; bisogna comunque aggiornarsi, se non altro per
      mantenere il passo con i colleghi di lavoro. Salvo rari casi, l&#146;upgrade non &egrave; un
      trauma e si pu&ograve; riprendere a lavorare senza troppi problemi.</font> <br>
      <font COLOR="#004080">Con il software aziendale, &egrave; tutt&#146;altra musica. Nelle aziende,
      ne sa qualcosa chi si sta occupando della questione "anno 2000" esistono procedure che
      girano da dieci, venti o trent&#146;anni. Scritte in linguaggi che i programmatori di oggi
      non conoscono pi&ugrave;. Piene di buchi, rabberci e rattoppi, stanno su per miracolo e il
      tenerle insieme impegna costantemente molte risorse. Ma non si trova nessuno che abbia il
      coraggio di affrontare la responsabilit&agrave; di incentivare la rottamazione di un parco
      applicativo cos&igrave; obsoleto.</font> <br>
      <font COLOR="#004080">Il problema &egrave; che rifare le vecchie procedure &egrave; un incubo peggiore
      di tenerle cos&igrave; come sono. I costi e i tempi di realizzazione e rilascio sono ampiamente
      imprevedibili, come sa chi ha lavorato in progetti di nuovo sviluppo o di rifacimento di
      un&#146;applicazione aziendale. L&#146;esito &egrave; incerto e i rapporti tra i progettisti
      software, i committenti e gli utenti dei loro sistemi si fanno burrascosi. Meglio non
      riaffrontare una simile prospettiva, pensa chi ci &egrave; gi&agrave; passato. E i committenti, quasi
      sempre, concordano.</font> </p>
      <p><b><font COLOR="#004080">Purch&eacute; non sia sviluppo</font></b> <br>
      <font COLOR="#004080">Ovviamente, non &egrave; affatto detto che tutti i progetti di sviluppo
      debbano essere cos&igrave; rovinosi. Il fatto, purtroppo, &egrave; che spesso lo sono, e numerose
      fonti indicano che oltre due terzi dei progetti, anche quando producono un risultato
      accettabile, sforano nettamente i tempi e i costi stabiliti.</font> <br>
      <font COLOR="#004080">Una delle soluzioni possibili per evitare i rischi dello sviluppo &egrave;
      quella di acquistare pacchetti applicativi gi&agrave; pronti. Pu&ograve; essere una
      strada per ridurre i costi e i tempi, ma non &egrave; praticabile in tutti i casi e per tutti
      gli ambiti applicativi. Una seconda soluzione, molto pi&ugrave; diffusa, &egrave; quella di
      intervenire sulle applicazioni esistenti, per adattarle al variare delle esigenze di
      committenti e utenti.</font> <br>
      <font COLOR="#004080">&Egrave; la cosiddetta manutenzione evolutiva, che consiste nel modificare
      l&#146;applicazione per rispondere a nuovi requisiti o alla variazione di quelli
      esistenti. Si parla, al contrario, di manutenzione correttiva per riferirsi
      all&#146;attivit&agrave; di eliminazione degli errori presenti nel software.</font> <br>
      <font COLOR="#004080">In molte aziende l&#146;attivit&agrave; di manutenzione copre
      l&#146;80-90% delle risorse totali di sviluppo del settore It (si tratta, per fortuna,
      pi&ugrave; di manutenzione evolutiva che non di tipo correttivo). E il dipartimento della Difesa
      Usa calcola che oltre il 75% del costo complessivo di un&#146;applicazione sia sostenuto
      nel periodo successivo al primo rilascio. La manutenzione non &egrave; quindi un&#146;attivit&agrave;
      occasionale, ma la modalit&agrave; di lavoro pi&ugrave; consueta per chi si occupa di sviluppo
      software all&#146;interno di un&#146;azienda. Non &egrave; un bel mestiere. Fare manutenzione
      significa, spesso, dover mettere mano per anni a procedure di qualit&agrave; scadente, restare
      legati a tecnologie sorpassate, avere meno possibilit&agrave; di crescita professionale.
      Insomma, sentirsi informatici di serie B.</font> </p>
      <p><b><font COLOR="#004080">Il processo di manutenzione</font></b> <br>
      <font COLOR="#004080">Le applicazioni software non hanno una vera e propria usura. Ma la
      loro organizzazione interna tende a degradare progressivamente sotto l&#146;effetto di
      tanti piccoli, ripetuti cambiamenti. Se le specifiche non vengono aggiornate insieme al
      codice, se la struttura dei programmi e delle procedure viene modificata frettolosamente
      per rispondere ai nuovi requisiti, pian piano l&#146;organizzazione logica iniziale viene
      sconvolta, fino a non essere pi&ugrave; riconoscibile.</font> <br>
      <font COLOR="#004080">Troppo spesso la manutenzione evolutiva si risolve in una serie di
      interventi di aggiustamento rapido e soffre della mancanza di metodo nel condurre le
      modifiche. Anche nelle aziende che hanno investito per dotarsi di metodologie e standard
      per lo sviluppo, il processo di manutenzione pi&agrave; utilizzato &egrave; il "Code and Fix":
      codifica e aggiusta .</font> <br>
      <font COLOR="#004080">Non si parla di una vera e propria analisi dei requisiti, in
      manutenzione, salvo in casi eccezionali. N&eacute;, ed &egrave; quasi altrettanto grave, si parla di
      rivedere l&#146;architettura modulare del software per verificare se valga la pena
      ottimizzarla alla luce delle nuove esigenze. E, per finire, dopo la modifica del codice,
      non &egrave; nemmeno diffusa la pratica del regression testing, per verificare che le variazioni
      non abbiano danneggiato le funzioni preesistenti.</font> <br>
      <font COLOR="#004080">Come nota Capers Jones, uno degli analisti pi&ugrave; attenti delle
      problematiche industriali del settore It, si tratta di errori di impostazione da
      attribuire essenzialmente a fattori culturali.</font> <br>
      <font COLOR="#004080">Secondo Jones, la manutenzione &egrave; afflitta soprattutto
      dall&#146;inattivit&agrave; e dalla passivit&agrave; del management, inconsapevole del fatto che i
      costi della manutenzione possono essere drasticamente ridotti analizzando il processo di
      lavoro, e intervenendo per ottimizzarlo.</font> <br>
      <font COLOR="#004080">Un ciclo di vita delle applicazioni iterativo e incrementale (come
      quello a spirale), che &egrave; poi quello adottato da tutti i
      principali produttori di software a livello mondiale, permette di affrontare i problemi
      manutentivi in modo pi&ugrave; efficiente ed efficace. Gli interventi vengono di fatto
      equiparati a quelli di sviluppo, nel senso che anche nei cicli di manutenzione si
      effettuano in modo sistematico attivit&agrave; di analisi, disegno, realizzazione e test,
      aggiornando codice e documentazione.</font> <br>
      <font COLOR="#004080">Nulla di rivoluzionario, ma il fatto, purtroppo, &egrave; che spesso la
      situazione &egrave; talmente congestionata che il solo pensare a una razionalizzazione del
      processo di lavoro manutentivo risulta impraticabile.</font> <br>
      <font COLOR="#004080">Scarsa efficienza, deterioramento progressivo della qualit&agrave; delle
      applicazioni, insoddisfazione del personale, costi elevati. Non stupisce che numerose
      aziende oggi siano sempre pi&ugrave; tentate dal risolvere i problemi della manutenzione
      affidandola all&#146;esterno.</font> </p>
      <p><b><font COLOR="#004080">Outsourcing della manutenzione</font></b> <br>
      <font COLOR="#004080">L&#146;outsourcing di manutenzione &egrave; una proposta che diverse
      societ&agrave; di consulenza e sviluppo offrono ai propri clienti. In particolare, oggi i
      fornitori propongono di esternalizzare le attivit&agrave; legate alla cosiddetta manutenzione di
      massa (interventi ad ampio raggio per effettuare modifiche di tipo ripetitivo a un gran
      numero di programmi) per adeguare le procedure all&#146;arrivo dell&#146;Euro e
      dell&#146;anno 2000.</font> <br>
      <font COLOR="#004080">In molti casi &egrave; proprio questa la strada scelta dalle aziende per
      affrontare eventi di tipo eccezionale senza gravare ulteriormente sulle risorse di
      programmazione interne. Ma l&#146;offerta di outsourcing di manutenzione sta prendendo
      piede in modo pi&ugrave; generalizzato, con l&#146;affidamento a fornitori esterni
      dell&#146;evoluzione di intere procedure.</font> <br>
      <font COLOR="#004080">Si tratta di un fenomeno per molti versi nuovo, che richiede
      un&#146;attenta definizione a livello contrattuale del processo, delle reciproche
      responsabilit&agrave; e dei livelli di servizio. Come devono essere documentate le procedure che
      il fornitore prender&agrave; in carico? Chi trasmetter&agrave; al fornitore i requisiti del
      committente aziendale che originano gli interventi di modifica? A quale livello di
      definizione (funzionale, tecnico) e in che formato verranno effettuate le richieste di
      intervento? Come verranno effettuati la pianificazione e il controllo di avanzamento?
      Quali livelli devono essere previsti per l&#146;accettazione del sistema modificato?</font>
      <br>
      <font COLOR="#004080">L&#146;outsourcing pu&ograve; rappresentare in molti casi una risposta
      efficace ai problemi della manutenzione applicativa. Ma per risultare un&#146;esperienza
      davvero vantaggiosa, e non originare troppi conflitti e disservizi, &egrave; necessario che
      l&#146;azienda cliente analizzi in modo sistematico il proprio processo di manutenzione,
      mettendo bene in luce le criticit&agrave; esistenti e il modo in cui queste possono essere
      risolte delegando al fornitore una serie di attivit&agrave;.</font> <br>
      &nbsp; </p>
      <hr />
      <p><a href="../../articoli.htm">Elenco pubblicazioni</a>.</p>

	<hr />
	<p class="centered"><a href="../../index.html"> analisi-disegno.com </a>, servizi e materiali per lo sviluppo dei sistemi software, a cura di <a href="../../a_comai/adriano_comai.htm">Adriano 
  		Comai</a>. </p>  
</body>
</html>
